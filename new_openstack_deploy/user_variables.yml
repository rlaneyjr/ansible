---
# Copyright 2014, Rackspace US, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

###
### This file contains commonly used overrides for convenience. Please inspect
### the defaults for each role to find additional override options.
###

## Debug and Verbose options.
debug: False

#unbound_package_state: latest
#
#unbound_upstream_resolvers:
#  - 10.0.10.5
#  - 10.0.10.6
##  - 209.18.47.61
##  - 209.18.47.62
#unbound_localzone_mode: static
#unbound_root_zone: icloudmon.local
#unbound_regional_zone: "{{ service_region }}.{{ unbound_root_zone }}"
#unbound_listen_interface: 0.0.0.0
#unbound_access_control:
#  - cidr: 0.0.0.0/0
#    action: allow
#
##bind ipv6 socket
#unbound_ipv6: False

##deploys to server like priority-template.conf
##so for example, 000-server.conf in unbound_conf_dir which is in the include path by default
#unbound_configuration_templates:
#  - template: "server.conf"
#    priority: 0
#  - template: "openstack.conf"
#
##additional records example:
##unbound_records:
##  - name: 'extra'
##    priority: 50 (optional)
##    records:
##      - { host: hostname1.openstack, val: 10.10.10.1, type: A }
##      - { host: hostname2.openstack, val: 10.10.10.2, type: A }
#unbound_records: []

#resolvconf_resolver_group: dns-servers
#resolvconf_resolver_ips: 
#  - "10.0.10.5"
#  - "10.0.10.6"
#resolvconf_search_domains:
#  - icloudmon.local
#resolvconf_options: []
#resolvconf_packages: []

apply_security_hardening: False
#unbound_resolvconf_forwarders: False
# Set the openstack domain name
#openstack_domain: icloudmon.local
# PCI devices passthrough to nova
# For SR-IOV please use:
#   nova_pci_passthrough_whitelist: '{ "physical_network": "<ml2 network name>", "devname": "<physical nic>" }'
#   Example:
#     nova_pci_passthrough_whitelist: '{ "physical_network": "physnet1", "devname": "p1p1" }'
#nopenstackova_pci_passthrough_whitelist: {}

## Common Glance Overrides
# Set glance_default_store to "swift" if using Cloud Files backend
# or "rbd" if using ceph backend; the latter will trigger ceph to get
# installed on glance. If using a file store, a shared file store is
# recommended. See the OpenStack-Ansible install guide and the OpenStack
# documentation for more details.
# Note that "swift" is automatically set as the default back-end if there
# are any swift hosts in the environment. Use this setting to override
# this automation if you wish for a different default back-end.
# glance_default_store: file

## Ceph pool name for Glance to use
# glance_rbd_store_pool: images
# glance_rbd_store_chunk_size: 8

## Common Nova Overrides
# When nova_libvirt_images_rbd_pool is defined, ceph will be installed on nova
# hosts.
# nova_libvirt_images_rbd_pool: vms

# If you wish to change the dhcp_domain configured for both nova and neutron
#dhcp_domain: icloudmon.local

## Common Glance Overrides when using a Swift back-end
# By default when 'glance_default_store' is set to 'swift' the playbooks will
# expect to use the Swift back-end that is configured in the same inventory.
# If the Swift back-end is not in the same inventory (ie it is already setup
# through some other means) then these settings should be used.
#
# NOTE: Ensure that the auth version matches your authentication endpoint.
#
# NOTE: If the password for glance_swift_store_key contains a dollar sign ($),
# it must be escaped with an additional dollar sign ($$), not a backslash. For
# example, a password of "super$ecure" would need to be entered as
# "super$$ecure" below.  See Launchpad Bug #1259729 for more details.
#
# glance_swift_store_auth_version: 3
# glance_swift_store_auth_address: "https://some.auth.url.com"
# glance_swift_store_user: "OPENSTACK_TENANT_ID:OPENSTACK_USER_NAME"
# glance_swift_store_key: "OPENSTACK_USER_PASSWORD"
# glance_swift_store_container: "NAME_OF_SWIFT_CONTAINER"
# glance_swift_store_region: "NAME_OF_REGION"

## Common Ceph Overrides
# ceph_mons:
#   - 10.16.5.40
#   - 10.16.5.41
#   - 10.16.5.42

## Custom Ceph Configuration File (ceph.conf)
# By default, your deployment host will connect to one of the mons defined above to
# obtain a copy of your cluster's ceph.conf.  If you prefer, uncomment ceph_conf_file
# and customise to avoid ceph.conf being copied from a mon.
#ceph_conf_file: |
#  [global]
#  fsid = 00000000-1111-2222-3333-444444444444
#  mon_initial_members = mon1.example.local,mon2.example.local,mon3.example.local
#  mon_host = 10.16.5.40,10.16.5.41,10.16.5.42
#  # optionally, you can use this construct to avoid defining this list twice:
#  # mon_host = {{ ceph_mons|join(',') }}
#  auth_cluster_required = cephx
#  auth_service_required = cephx


# By default, openstack-ansible configures all OpenStack services to talk to
# RabbitMQ over encrypted connections on port 5671. To opt-out of this default,
# set the rabbitmq_use_ssl variable to 'false'. The default setting of 'true'
# is highly recommended for securing the contents of RabbitMQ messages.
#rabbitmq_use_ssl: false

# RabbitMQ management plugin is enabled by default, the guest user has been
# removed for security reasons and a new userid 'monitoring' has been created
# with the 'monitoring' user tag. In order to modify the userid, uncomment the
# following and change 'monitoring' to your userid of choice.
rabbitmq_monitoring_userid: admin


## Additional pinning generator that will allow for more packages to be pinned as you see fit.
## All pins allow for package and versions to be defined. Be careful using this as versions
## are always subject to change and updates regarding security will become your problem from this
## point on. Pinning can be done based on a package version, release, or origin. Use "*" in the
## package name to indicate that you want to pin all package to a particular constraint.
# apt_pinned_packages:
#   - { package: "lxc", version: "1.0.7-0ubuntu0.1" }
#   - { package: "libvirt-bin", version: "1.2.2-0ubuntu13.1.9" }
#   - { package: "rabbitmq-server", origin: "www.rabbitmq.com" }
#   - { package: "*", release: "MariaDB" }


## Environment variable settings
# This allows users to specify the additional environment variables to be set
# which is useful in setting where you working behind a proxy. If working behind
# a proxy It's important to always specify the scheme as "http://". This is what
# the underlying python libraries will handle best. This proxy information will be
# placed both on the hosts and inside the containers.

## Example environment variable setup:
# proxy_env_url: http://username:pa$$w0rd@10.10.10.9:9000/
# no_proxy_env: "localhost,127.0.0.1,{{ internal_lb_vip_address }},{{ external_lb_vip_address }},{% for host in groups['all_containers'] %}{{ hostvars[host]['container_address'] }}{% if not loop.last %},{% endif %}{% endfor %}"
# global_environment_variables:
#   HTTP_PROXY: "{{ proxy_env_url }}"
#   HTTPS_PROXY: "{{ proxy_env_url }}"
#   NO_PROXY: "{{ no_proxy_env }}"
#   http_proxy: "{{ proxy_env_url }}"
#   https_proxy: "{{ proxy_env_url }}"
#   no_proxy: "{{ no_proxy_env }}"


## SSH connection wait time
# If an increased delay for the ssh connection check is desired,
# uncomment this variable and set it appropriately.
ssh_delay: 15


## HAProxy
# Uncomment this to disable keepalived installation (cf. documentation)
haproxy_use_keepalived: False

# HAProxy Keepalived configuration (cf. documentation)
# Make sure that this is set correctly according to the CIDR used for your
# internal and external addresses.
#haproxy_keepalived_external_vip_cidr: "10.0.125.0/24"
#haproxy_keepalived_internal_vip_cidr: "10.0.124.0/24"
#haproxy_keepalived_external_interface: bond4
#haproxy_keepalived_internal_interface: bond3

# Defines the default VRRP id used for keepalived with haproxy.
# Overwrite it to your value to make sure you don't overlap
# with existing VRRPs id on your network. Default is 10 for the external and 11 for the
# internal VRRPs
# haproxy_keepalived_external_virtual_router_id:
# haproxy_keepalived_internal_virtual_router_id:

# Defines the VRRP master/backup priority. Defaults respectively to 100 and 20
# haproxy_keepalived_priority_master:
# haproxy_keepalived_priority_backup:

# Keepalived default IP address used to check its alive status (IPv4 only)
#keepalived_ping_address: "193.0.14.129"

# All the previous variables are used in a var file, fed to the keepalived role.
# To use another file to feed the role, override the following var:
# haproxy_keepalived_vars_file: 'vars/configs/keepalived_haproxy.yml'

############################
# ==> NEUTRON DEFAULTS <== #
############################
# Copyright 2014, Rackspace US, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

#neutron_developer_mode: false
#
## Enable/Disable designate
#neutron_designate_enabled: False
#
## Notifications topic for designate
#neutron_notifications_designate: notifications_designate
#
## Enable/Disable Ceilometer
#neutron_ceilometer_enabled: False
#
### Plugins
#neutron_plugin_core: "{{ neutron_plugins[neutron_plugin_type].plugin_core }}"
## Other plugins can be added to the system by simply extending the list `neutron_plugin_base`.
## neutron_plugin_base:
##   - router
##   - firewall
##   - lbaas
##   - neutron_dynamic_routing.services.bgp.bgp_plugin.BgpPlugin
##   - vpnaas
##   - metering
##   - qos
## Deprecated: instead of triggering lbaas through neutron_plugin_core it will be triggered when Octavia is installed, neutron_lbaas_namespace var is set to True, or both:
##   - neutron_lbaas.services.loadbalancer.plugin.LoadBalancerPluginv2 or lbaasv2
#neutron_lbaas_namespace: "{% if 'neutron_lbaas.services.loadbalancer.plugin.LoadBalancerPluginv2' in neutron_plugin_base %}True{% else %}False{% endif %}"
#neutron_lbaas_octavia: False
#neutron_lbaasv2: "{% if (neutron_lbaas_namespace|bool) or (neutron_lbaas_octavia | bool) %}True{% else %}False{% endif %}"

#neutron_plugin_base:
#  - router
#  - metering
#  - neutron_dynamic_routing.services.bgp.bgp_plugin.BgpPlugin
#neutron_plugin_loaded_base: "{% for plugin in neutron_plugin_base %}{{ plugin }}{% if not loop.last %},{% endif %}{% endfor %}{% if (neutron_lbaasv2|bool) and ('neutron_lbaas.services.loadbalancer.plugin.LoadBalancerPluginv2' not in neutron_plugin_base) %},lbaasv2{% endif %}"
#
## Neutron Plugins
## The neutron core plugin (ML2) is defined with neutron_plug in_type,
## you can not load multiple ML2 plugins as core.
## Additional ML2 plugins can be loaded with neutron_plugin_types (as list)
#neutron_plugin_type: 'ml2.lxb'
#neutron_plugin_types: []
#neutron_ml2_mechanism_drivers: >-
#  {%- set _var = [] -%}
#  {%- for plugin in [neutron_plugin_type]|union(neutron_plugin_types) -%}
#    {%- if _var.append(neutron_plugins[plugin].mechanisms) -%}{%- endif -%}
#  {%- endfor -%}
#  {%- if neutron_l2_population | bool -%}
#    {%- if _var.append('l2population') -%}{%- endif -%}
#  {%- endif -%}
#  {{ _var | join(',') }}
#
#neutron_plugins:
#  ml2.lxb:
#    driver_firewall: iptables
#    driver_interface: linuxbridge
#    drivers_type: "{{ neutron_ml2_drivers_type }}"
#    l2_population: "{{ neutron_l2_population }}"
#    mechanisms: "linuxbridge"
#    l3_agent_mode: "legacy"
#    plugin_conf_ini_overrides: "{{ neutron_ml2_conf_ini_overrides }}"
#    plugin_core: ml2
#    plugin_ini: plugins/ml2/ml2_conf.ini
#  ml2.ovs:
#    driver_firewall: iptables_hybrid
#    driver_interface: openvswitch
#    drivers_type: "{{ neutron_ml2_drivers_type }}"
#    l2_population: "{{ neutron_l2_population }}"
#    mechanisms: "openvswitch"
#    l3_agent_mode: "legacy"
#    plugin_conf_ini_overrides: "{{ neutron_ml2_conf_ini_overrides }}"
#    plugin_core: ml2
#    plugin_ini: plugins/ml2/ml2_conf.ini
#  ml2.ovs.dvr:
#    driver_firewall: iptables_hybrid
#    driver_interface: openvswitch
#    drivers_type: "{{ neutron_ml2_drivers_type }}"
#    l2_population: "{{ neutron_l2_population }}"
#    mechanisms: "openvswitch"
#    l3_agent_mode: "{% if 'nova_compute' in group_names %}dvr{% else %}dvr_snat{% endif %}"
#    router_distributed: True
#    plugin_conf_ini_overrides: "{{ neutron_ml2_conf_ini_overrides }}"
#    plugin_core: ml2
#    plugin_ini: plugins/ml2/ml2_conf.ini
#  ml2.calico:
#    drivers_type: "flat, local"
#    mechanisms: "calico"
#    plugin_conf_ini_overrides: "{{ neutron_ml2_conf_ini_overrides }}"
#    plugin_core: ml2
#    plugin_ini: plugins/ml2/ml2_conf.ini
#  ml2.dragonflow:
#    plugin_core: neutron.plugins.ml2.plugin.Ml2Plugin
#    plugin_ini: plugins/ml2/ml2_conf.ini
#    drivers_type: "{{ neutron_ml2_drivers_type }}"
#    mechanisms: "df"
#    plugin_conf_ini_overrides: "{{ neutron_ml2_conf_ini_overrides }}"
#    l3_agent_mode: "legacy"
#    driver_interface: "openvswitch"
#  plumgrid:
#    plugin_conf_ini_overrides: "{{ neutron_plumgrid_conf_ini_overrides }}"
#    plugin_core: networking_plumgrid.neutron.plugins.plugin.NeutronPluginPLUMgridV2
#    plugin_ini: plugins/plumgrid/plumgrid.ini
#  nuage:
#    plugin_core: neutron.plugins.nuage.plugin.NuagePlugin
#    plugin_ini: plugins/nuage/nuage.ini
#    plugin_conf_ini_overrides: "{{ neutron_nuage_conf_ini_overrides }}"
#  ml2.sriov:
#    driver_types: "{{ neutron_ml2_drivers_type }}"
#    mechanisms: "sriovnicswitch"
#    plugin_ini: plugins/ml2/sriov_nic_agent.ini
#    plugin_conf_ini_overrides: "{{ neutron_sriov_nic_agent_ini_overrides }}"
#
#neutron_services:
# neutron-dhcp-agent:
#   group: neutron_dhcp_agent
#   service_name: neutron-dhcp-agent
#   service_en: "{{ neutron_dhcp | bool }}"
#   service_conf_path: "{{ neutron_conf_dir }}"
#   service_conf: dhcp_agent.ini
#   service_rootwrap: rootwrap.d/dhcp.filters
#   config_options: "--config-file {{ neutron_conf_dir }}/neutron.conf --config-file {{ neutron_conf_dir }}/dhcp_agent.ini --log-file=/var/log/neutron/neutron-dhcp-agent.log"
#   config_overrides: "{{ neutron_dhcp_agent_ini_overrides }}"
#   config_type: "ini"
# neutron-openvswitch-agent:
#   group: neutron_openvswitch_agent
#   service_name: neutron-openvswitch-agent
#   service_en: "{{ 'ml2.ovs' in neutron_plugin_type }}"
#   service_conf_path: "{{ neutron_conf_dir }}"
#   service_conf: plugins/ml2/openvswitch_agent.ini
#   service_rootwrap: rootwrap.d/openvswitch-plugin.filters
#   config_options: "--config-file {{ neutron_conf_dir }}/neutron.conf --config-file {{ neutron_conf_dir }}/plugins/ml2/ml2_conf.ini --config-file {{ neutron_conf_dir }}/plugins/ml2/openvswitch_agent.ini --log-file=/var/log/neutron/neutron-openvswitch-agent.log"
#   config_overrides: "{{ neutron_openvswitch_agent_ini_overrides }}"
#   config_type: "ini"
# neutron-linuxbridge-agent:
#   group: neutron_linuxbridge_agent
#   service_name: neutron-linuxbridge-agent
#   service_en: "{{ neutron_plugin_type == 'ml2.lxb' }}"
#   service_conf_path: "{{ neutron_conf_dir }}"
#   service_conf: plugins/ml2/linuxbridge_agent.ini
#   service_rootwrap: rootwrap.d/linuxbridge-plugin.filters
#   config_options: "--config-file {{ neutron_conf_dir }}/neutron.conf --config-file {{ neutron_conf_dir }}/plugins/ml2/ml2_conf.ini --config-file {{ neutron_conf_dir }}/plugins/ml2/linuxbridge_agent.ini --log-file=/var/log/neutron/neutron-linuxbridge-agent.log"
#   config_overrides: "{{ neutron_linuxbridge_agent_ini_overrides }}"
#   config_type: "ini"
# neutron-metadata-agent:
#   group: neutron_metadata_agent
#   service_name: neutron-metadata-agent
#   service_en: "{{ neutron_metadata | bool }}"
#   service_conf_path: "{{ neutron_conf_dir }}"
#   service_conf: metadata_agent.ini
#   config_options: "--config-file {{ neutron_conf_dir }}/neutron.conf --config-file {{ neutron_conf_dir }}/metadata_agent.ini --log-file=/var/log/neutron/neutron-metadata-agent.log"
#   config_overrides: "{{ neutron_metadata_agent_ini_overrides }}"
#   config_type: "ini"
# neutron-metering-agent:
#   group: neutron_metering_agent
#   service_name: neutron-metering-agent
#   service_en: "{{ neutron_metering | bool }}"
#   service_conf_path: "{{ neutron_conf_dir }}"
#   service_conf: metering_agent.ini
#   config_options: "--config-file {{ neutron_conf_dir }}/neutron.conf --config-file {{ neutron_conf_dir }}/metering_agent.ini --log-file=/var/log/neutron/neutron-metering-agent.log"
#   config_overrides: "{{ neutron_metering_agent_ini_overrides }}"
#   config_type: "ini"
#   # Other agents will use neutron_plugins[neutron_plugin_type].driver_interface
#   # for the interface_driver, but that uses a stevedore alias. Metering agent
#   # hasn't been updated to use stevedore alises so that fails. To work around
#   # the problem until metering agent is updated, we should use the full
#   # module.class path to the interface driver.
#   # TODO(hughsaunders): switch back to stevedore when
#   # https://review.openstack.org/#/c/419881/ merges and is backported.
#   interface_driver: neutron.agent.linux.interface.BridgeInterfaceDriver
# neutron-l3-agent:
#   group: neutron_l3_agent
#   service_name: neutron-l3-agent
#   service_en: "{{ neutron_l3 | bool }}"
#   service_conf_path: "{{ neutron_conf_dir }}"
#   service_conf: l3_agent.ini
#   service_rootwrap: rootwrap.d/l3.filters
#   config_options: "--config-file {{ neutron_conf_dir }}/neutron.conf --config-file {{ neutron_conf_dir }}/l3_agent.ini --log-file=/var/log/neutron/neutron-l3-agent.log"
#   config_overrides: "{{ neutron_l3_agent_ini_overrides }}"
#   config_type: "ini"
# neutron-lbaasv2-agent:
#   group: neutron_lbaas_agent
#   service_name: neutron-lbaasv2-agent
#   service_en: "{{ neutron_lbaas_namespace | bool }}"
#   service_conf_path: "{{ neutron_conf_dir }}"
#   service_conf: lbaas_agent.ini
#   service_rootwrap: rootwrap.d/lbaas-haproxy.filters
#   config_options: "--config-file {{ neutron_conf_dir }}/neutron.conf --config-file {{ neutron_conf_dir }}/lbaas_agent.ini --log-file=/var/log/neutron/neutron-lbaasv2-agent.log"
#   config_overrides: "{{ neutron_lbaas_agent_ini_overrides }}"
#   config_type: "ini"
# neutron-bgp-dragent:
#   group: neutron_bgp_dragent
#   service_name: neutron-bgp-dragent
#   service_en: "{{ neutron_bgp | bool }}"
#   service_conf_path: "{{ neutron_conf_dir }}"
#   service_conf: bgp_dragent.ini
#   config_options: "--config-file {{ neutron_conf_dir }}/neutron.conf --config-file {{ neutron_conf_dir }}/bgp_dragent.ini --log-file=/var/log/neutron/neutron-bgp-dragent.log"
#   config_overrides: "{{ neutron_bgp_dragent_ini_overrides }}"
#   config_type: "ini"
# neutron-vpnaas-agent:
#   group: neutron_l3_agent
#   service_name: neutron-vpn-agent
#   service_en: "{{ neutron_vpnaas | bool }}"
#   service_conf_path: "{{ neutron_conf_dir }}"
#   service_conf: vpnaas_agent.ini
#   service_rootwrap: rootwrap.d/vpnaas.filters
#   config_options: "--config-file {{ neutron_conf_dir }}/neutron.conf --config-file {{ neutron_conf_dir }}/vpnaas_agent.ini --log-file=/var/log/neutron/neutron-vpn-agent.log"
#   config_overrides: "{{ neutron_vpnaas_agent_ini_overrides }}"
#   config_type: "ini"
# neutron-server:
#   group: neutron_server
#   service_name: neutron-server
#   service_en: True
#   config_options: "--config-file {{ neutron_conf_dir }}/neutron.conf --config-file {{ neutron_conf_dir }}/{{ neutron_plugins[neutron_plugin_type].plugin_ini }} --log-file=/var/log/neutron/neutron-server.log {% if neutron_plugin_type == 'ml2.dragonflow' %}--config-file {{ neutron_conf_dir }}/dragonflow.ini{% endif %}"
# calico-felix:
#   group: neutron_calico_dhcp_agent
#   service_name: calico-felix
#   service_en: "{{ neutron_plugin_type == 'ml2.calico' }}"
#   service_conf_path: /etc/calico
#   service_conf: felix.cfg
#   config_options: --config-file /etc/calico/felix.cfg
#   config_overrides: "{{ neutron_calico_felix_ini_overrides }}"
#   config_type: "ini"
# calico-dhcp-agent:
#   group: neutron_calico_dhcp_agent
#   service_name: calico-dhcp-agent
#   service_en: "{{ neutron_plugin_type == 'ml2.calico' }}"
#   service_rootwrap: rootwrap.d/dhcp.filters
#   config_options: "--config-file {{ neutron_conf_dir }}/neutron.conf"
#   config_overrides: "{{ neutron_calico_dhcp_agent_ini_overrides }}"
#   config_type: "ini"
# neutron-sriov-nic-agent:
#   group: neutron_sriov_nic_agent
#   service_name: neutron-sriov-nic-agent
#   service_en: "{{ 'ml2.sriov' in neutron_plugin_types }}"
#   service_conf_path: "{{ neutron_conf_dir }}"
#   service_conf: plugins/ml2/sriov_nic_agent.ini
#   config_options: "--config-file {{ neutron_conf_dir }}/neutron.conf --config-file {{ neutron_conf_dir }}/plugins/ml2/ml2_conf.ini --config-file {{ neutron_conf_dir }}/plugins/ml2/sriov_nic_agent.ini --log-file=/var/log/neutron/neutron-sriov-nic-agent.log"
#   config_overrides: "{{ neutron_sriov_nic_agent_ini_overrides }}"
#   config_type: "ini"
# dragonflow-controller-agent:
#   group: dragonflow_controller_agent
#   service_name: df-local-controller
#   service_en: "{{ neutron_plugin_type == 'ml2.dragonflow' }}"
#   config_options: "--config-file {{ neutron_conf_dir }}/neutron.conf --config-file {{ neutron_conf_dir }}/dragonflow.ini --log-file=/var/log/dragonflow/df-local-controller.log"
#   config_overrides: "{{ neutron_dragonflow_ini_overrides }}"
#   config_type: "ini"
# dragonflow-l3-agent:
#   group: dragonflow_l3_agent
#   service_name: df-l3-agent
#   service_en: "{{ neutron_plugin_type == 'ml2.dragonflow' and neutron_l3 | bool }}"
#   service_conf_path: "{{ neutron_conf_dir }}"
#   service_conf: l3_agent.ini
#   service_rootwrap: rootwrap.d/l3.filters
#   config_options: "--config-file {{ neutron_conf_dir }}/neutron.conf --config-file {{ neutron_conf_dir }}/l3_agent.ini --log-file=/var/log/dragonflow/df-l3-agent.log"
#   config_overrides: "{{ neutron_dragonflow_ini_overrides }}"
#   config_type: "ini"
# dragonflow-pubsub-agent:
#   group: dragonflow_pubsub_agent
#   service_name: df-publisher-service
#   service_en: "{{ neutron_plugin_type == 'ml2.dragonflow' }}"
#   config_options: "--config-file {{ neutron_conf_dir }}/neutron.conf --config-file {{ neutron_conf_dir }}/dragonflow.ini --log-file=/var/log/dragonflow/df-publisher-service.log"
#   config_overrides: "{{ neutron_dragonflow_ini_overrides }}"
#   config_type: "ini"
#
### Neutron DHCP Agent
#neutron_dhcp: "{% if neutron_plugin_type.split('.')[0] == 'ml2' %}True{% else %}False{% endif %}"
#
### Neutron Metadata Agent
#neutron_metadata: "{% if neutron_plugin_type.split('.')[0] == 'ml2' %}True{% else %}False{% endif %}"
#
### Neutron LBaaS
## See documentation section titled "Configuring the Network Load Balancing
## Service (Optional)" for more details.
#
#
## This complex logic activates either Namespace or Octavia or both or none; if
## Octavia is included it will be the default
#neutron_lbaasv2_plugin_drivers:
#  - "{% if neutron_lbaas_namespace | bool %}LOADBALANCERV2:Haproxy:neutron_lbaas.drivers.haproxy.plugin_driver.HaproxyOnHostPluginDriver{% else %}none{% endif %}"
#  - "{% if neutron_lbaas_octavia | bool %}LOADBALANCERV2:Octavia:neutron_lbaas.drivers.octavia.driver.OctaviaDriver{% else %}none{% endif %}"
#
#neutron_lbaasv2_service_provider: "{{ neutron_lbaasv2_plugin_drivers | reject('equalto','none') | join(',') }}{% if neutron_lbaasv2 %}:default{% endif %}"
#
#neutron_lbaasv2_device_driver: neutron_lbaas.drivers.haproxy.namespace_driver.HaproxyNSDriver
#neutron_octavia_request_poll_timeout: 100
#
#
### Neutron L3
### Please add 'router' to the neutron_plugin_base list
##TODO(odyssey4me): Remove the class path from this conditional in the Newton cycle
## Should the neutron-l3-agent service should be enabled on the host
#neutron_l3: "{% if 'router' in neutron_plugin_base or 'neutron.services.l3_router.l3_router_plugin.L3RouterPlugin' in neutron_plugin_base or 'df-l3' in neutron_plugin_base %}True{% else %}False{% endif %}"
#
## Set this option to "true" to enable legacy neutron L3HA tool support
## TODO(cloudnull): Remove this in the Ocata cycle
#neutron_legacy_ha_tool_enabled: false
#
### Neutron Metering
## Please add 'metering' to the neutron_plugin_base list
##TODO(odyssey4me): Remove the class path from this conditional in the Newton cycle
#neutron_metering: "{% if 'metering' in neutron_plugin_base or 'neutron.services.metering.metering_plugin.MeteringPlugin' in neutron_plugin_base %}True{% else %}False{% endif %}"
#
### Neutron FWaaS
## Please add the 'firewall' to the neutron_plugin_base list
#neutron_fwaas: "{% if 'firewall' in neutron_plugin_base %}True{% else %}False{% endif %}"
#
### Neutron VPNaaS
## Please add the 'vpnaas' to the neutron_plugin_base list
#neutron_vpnaas: "{% if 'vpnaas' in neutron_plugin_base %}True{% else %}False{% endif %}"
#
### Neutron Dynamic Routing Agent's BGP plugin
## To enable the BGP plugin, add the following item to the neutron_plugin_base list:
##   neutron_dynamic_routing.services.bgp.bgp_plugin.BgpPlugin
##
## NOTE(matias): BgpPlugin doesn't have entry points and the full classpath
##               is required.
#neutron_bgp: "{% if 'neutron_dynamic_routing.services.bgp.bgp_plugin.BgpPlugin' in neutron_plugin_base %}True{% else %}False{% endif %}"
#neutron_bgp_speaker_driver: neutron_dynamic_routing.services.bgp.agent.driver.ryu.driver.RyuBgpDriver
#neutron_bgp_router_id: "{{ neutron_local_ip }}"
#
### Drivers
#neutron_driver_network_scheduler: neutron.scheduler.dhcp_agent_scheduler.WeightScheduler
#neutron_driver_router_scheduler: neutron.scheduler.l3_agent_scheduler.LeastRoutersScheduler
#neutron_driver_loadbalancer_pool_scheduler: neutron_lbaas.services.loadbalancer.agent_scheduler.ChanceScheduler
#neutron_driver_metering: neutron.services.metering.drivers.iptables.iptables_driver.IptablesMeteringDriver
#neutron_driver_dhcp: neutron.agent.linux.dhcp.Dnsmasq
#neutron_driver_quota: neutron.db.quota.driver.DbQuotaDriver
#
#
### Quotas
#neutron_default_quota: -1
#neutron_quota_floatingip: 50
#neutron_quota_health_monitor: -1
#neutron_quota_member: -1
#neutron_quota_network: 10
#neutron_quota_network_gateway: 5
#neutron_quota_packet_filter: 100
#neutron_quota_pool: 10
#neutron_quota_port: 50
#neutron_quota_router: 10
#neutron_quota_security_group: 10
#neutron_quota_security_group_rule: 100
#neutron_quota_subnet: 10
#neutron_quota_vip: 10
#
### General Neutron configuration
## If ``neutron_api_workers`` is unset the system will use half the number of available VCPUs to
## compute the number of api workers to use with a default capping value of 16.
## neutron_api_workers: 16
#
## If ``neutron_metadata_workers`` is unset the system will use half the number of available VCPUs to
## compute the number of api workers to use with a default capping value of 16.
## neutron_metadata_workers: 16
#
### Cap the maximun number of threads / workers when a user value is unspecified.
#neutron_api_threads_max: 16
#neutron_api_threads: "{{ [[ansible_processor_vcpus|default(2) // 2, 1] | max, neutron_api_threads_max] | min }}"
#
#neutron_metadata_backlog: 4096
#
### Agent
#neutron_external_network_bridge: ""
#neutron_gateway_external_network_id: ""
#
#neutron_agent_down_time: 120
#neutron_agent_polling_interval: 5
#neutron_report_interval: "{{ neutron_agent_down_time | int / 2 | int }}"
#
## L3HA configuration options.
#neutron_ha_vrrp_auth_type: PASS
#neutron_l3_ha_net_cidr: 169.254.192.0/18
#
## DHCP AGENT CONFIG
#neutron_dhcp_config:
#  log-facility: "/var/log/neutron/neutron-dnsmasq.log"
#
#_neutron_non_tunnel_types:
#  - flat
#  - vlan
#  - local
#
## ml2 network type drivers to load
#neutron_ml2_drivers_type: "flat,vlan,vxlan,local"
#
## Tunnel network types used by the OVS agent
#neutron_tunnel_types: "{{ neutron_ml2_drivers_type.split(',') | difference(_neutron_non_tunnel_types) | join(',') }}"
#
## Enable or disable L2 Population.
#neutron_l2_population: "False"
#
### The neutron multicast group address. This should be set as a host variable if used.
### This defaults to the multicast address "239.1.1.1"
## neutron_vxlan_group: 239.1.1.100
#neutron_vxlan_group: "239.1.1.1"
#
### Set this variable to configure the provider networks that will be available
### When setting up networking in things like the ml2_conf.ini file. Normally
### this will be defined as a host variable used within neutron as network configuration
### are likely to differ in between hosts.
## neutron_provider_networks:
##   network_flat_networks: "flat"
##   network_mappings: "flat:eth12,vlan:eth11"
##   network_types: "vxlan,flat,vlan"
##   network_vlan_ranges: "vlan:1:1,vlan:1024:1025"
##   network_vxlan_ranges: "1:1000"
##   network_sriov_mappings: "vlan:p4p1"
#
#neutron_vxlan_enabled: true
#
#neutron_sriov_excluded_devices: ""
#
#neutron_dns_domain: icloudmon.local
## Comma-separated list of DNS servers which will be used by dnsmasq as forwarders.
#neutron_dnsmasq_dns_servers: "10.0.10.5,10.0.10.6"
## Limit number of leases to prevent a denial-of-service.
#neutron_dnsmasq_lease_max: 16777216
## If ``neutron_num_sync_threads`` is unset, the system will use the value of
## neutron_api_threads in templates/dhcp_agent.ini.j2 for num_sync_threads.
## neutron_num_sync_threads: 4
#
### RPC
#neutron_rpc_backend: rabbit
#neutron_rpc_thread_pool_size: 64
#neutron_rpc_conn_pool_size: 30
#neutron_rpc_response_timeout: 60
#neutron_rpc_workers: 1
#
#neutron_service_in_ldap: false
#
### Policy vars
## Provide a list of access controls to update the default policy.json with. These changes will be merged
## with the access controls in the default policy.json. E.g.
##neutron_policy_overrides:
##  "create_subnet": "rule:admin_or_network_owner"
##  "get_subnet": "rule:admin_or_owner or rule:shared"
#
## neutron_local_ip is used for the VXLAN local tunnel endpoint
#neutron_local_ip: 127.0.0.1
## neutron_management_ip is used to configure the location (IP) of the
## neutron-server
## Currently only used in Dragonflow
#neutron_management_ip: 127.0.0.1
#
## When running in an AIO, we need to implement an iptables rule in any
## neutron_agent containers to that ensure instances can communicate with
## the neutron metadata service. This is necessary because in an AIO
## environment there are no physical interfaces involved in instance ->
## metadata requests, and this results in the checksums being incorrect.
#neutron_metadata_checksum_fix: False
#
##Dragonflow configuration
## Database specific configuration
#dragonflow_remote_db_ip: 127.0.0.1 # etcd has local proxy installed
#dragonflow_remote_db_port: 4001
#dragonflow_nb_db_class: etcd_nb_db_driver
#dragonflow_pub_sub_driver: zmq_pubsub_driver
#dragonflow_pub_sub_multiproc_driver: zmq_pubsub_multiproc_driver
#dragonflow_pub_sub_multiproc_enabled: "{{ (dragonflow_pub_sub_multiproc_driver | default('', True)) | length > 0 }}"
#dragonflow_port_status_notifier:
#dragonflow_apps:
#    - l2_app.L2App
#    - l3_proactive_app.L3ProactiveApp
#    - dhcp_app.DHCPApp
#    - dnat_app.DNATApp
#    - sg_app.SGApp
#    - portsec_app.PortSecApp
#dragonflow_ex_peer_patch_port: patch-int
#dragonflow_int_peer_patch_port: patch-ex
#dragonflow_external_network_bridge: br-ex
#dragonflow_publisher_bind_address: "*"
#
## This variable is used by the repo_build process to determine
## which host group to check for members of before building the
## pip packages required by this role. The value is picked up
## by the py_pkgs lookup.
#neutron_role_project_group: neutron_all
#
### Tunable overrides
#neutron_neutron_conf_overrides: {}
#neutron_ml2_conf_ini_overrides: {}
#neutron_plumgrid_conf_ini_overrides: {}
#neutron_plumlib_ini_overrides: {}
#neutron_nuage_conf_ini_overrides: {}
#neutron_dhcp_agent_ini_overrides: {}
#neutron_api_paste_ini_overrides: {}
#neutron_rootwrap_conf_overrides: {}
#neutron_policy_overrides: {}
#neutron_dnsmasq_neutron_conf_overrides: {}
#neutron_l3_agent_ini_overrides: {}
#neutron_metadata_agent_ini_overrides: {}
#neutron_metering_agent_ini_overrides: {}
#neutron_linuxbridge_agent_ini_overrides: {}
#neutron_lbaas_agent_ini_overrides: {}
#neutron_vpnaas_agent_ini_overrides: {}
#neutron_openvswitch_agent_ini_overrides: {}
#neutron_bgp_dragent_ini_overrides: {}
#neutron_calico_dhcp_agent_ini_overrides: {}
#neutron_calico_felix_ini_overrides: {}
#neutron_sriov_nic_agent_ini_overrides: {}
#neutron_dragonflow_ini_overrides: {}
